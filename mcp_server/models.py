# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:46:59+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, conint


class CreateUserResponse(BaseModel):
    email: Optional[str] = Field(
        None, description="The user's email address", examples=['user@example.com']
    )
    guid: Optional[str] = Field(
        None,
        description="The user's password reset code",
        examples=['d5e53b3a-ffc1-4436-b085-04aaed5ec861'],
    )


class InvalidToken(BaseModel):
    message: Optional[str] = Field(None, examples=['Login Failed'])


class KeyFailure(BaseModel):
    message: Optional[str] = Field(None, examples=['Key Failures'])


class LoginResponse(BaseModel):
    admin: Optional[bool] = Field(
        None,
        description='True if this user is an admin. False otherwise',
        examples=[False],
    )
    login_id: Optional[int] = Field(
        None, description='The login id for this user', examples=[1]
    )
    name: Optional[str] = Field(
        None, description="This user's name", examples=['Firstname Lastname']
    )
    read_only: Optional[bool] = Field(
        None,
        description='True if this user has permissions to write to the database. False otherwise',
        examples=[False],
    )
    token: Optional[str] = Field(
        None,
        description='The API key that will be used to authenticate the user.',
        examples=['dc19b0b2-c0e3-821b-821a-d49e8c428479'],
    )


class RequestPasswordResetResponse(BaseModel):
    email: Optional[str] = Field(
        None, description="The user's email address", examples=['user@example.com']
    )
    guid: Optional[str] = Field(
        None,
        description='The password reset code',
        examples=['d5e53b3a-ffc1-4436-b085-04aaed5ec861'],
    )


class Signin(BaseModel):
    dt: Optional[float] = Field(
        None,
        description='The original scan time in number of seconds since 1/1/1970 (GMT)',
        examples=[1593409124.23],
    )
    email: Optional[str] = Field(
        None, description="The person's email", examples=['jqp@example.com']
    )
    id: Optional[int] = Field(None, description='The record id', examples=[125])
    name: str = Field(..., description="The person's name", examples=['John Q. Public'])
    phone: str = Field(
        ..., description="The person's phone number", examples=['(111)222-3333']
    )


class SigninResponse(BaseModel):
    result: Optional[conint(ge=1, le=1)] = Field(None, examples=[1])


class UserRecord(BaseModel):
    admin: Optional[bool] = Field(
        None,
        description='If the user has admin privileges then the user will be able to create password reset requests on behalf of other users, and will also be able to view and edit  the data of other users.\n',
        examples=[True],
    )
    email: Optional[str] = Field(
        None, description="The user's email address", examples=['user@example.com']
    )
    id: Optional[int] = Field(
        None, description="The id of the user's record", examples=[1]
    )
    name: Optional[str] = Field(
        None, description="The user's name", examples=['John Doe']
    )
    read_only: Optional[bool] = Field(
        None,
        description='Not used in this version of the API. For future use.',
        examples=[False],
    )


class ChangePasswordPostRequest(BaseModel):
    old_password: Optional[str] = Field(
        None, description='The old (current) password', examples=['hunter3']
    )
    password: Optional[str] = Field(
        None, description='The new password', examples=['hunter4']
    )


class Source(Enum):
    iOS = 'iOS'
    android = 'android'
    web = 'web'


class LoginPostRequest(BaseModel):
    email: Optional[str] = Field(None, examples=['aijaz@example.org'])
    password: Optional[str] = Field(None, examples=['hunter2'])
    source: Optional[Source] = None


class RequestPasswordResetPostRequest(BaseModel):
    email: Optional[str] = Field(
        None,
        description='The user whose password you want to reset',
        examples=['user@example.com'],
    )


class SigninsGetResponse(RootModel[List[Signin]]):
    root: List[Signin]


class UserPostRequest(BaseModel):
    admin: Optional[bool] = Field(
        None,
        description='If the user has admin privileges then the user will be able to create password reset requests on behalf of other users, and will also be able to view and edit  the data of other users.\n',
        examples=[True],
    )
    email: Optional[str] = Field(
        None,
        description='The email address of the user record you want to create',
        examples=['user@example.com'],
    )
    name: Optional[str] = Field(
        None,
        description='The name of the user record you want to create',
        examples=['Jane Doe'],
    )
    read_only: Optional[bool] = Field(
        None,
        description='Not used in this version of the API. For future use.',
        examples=[False],
    )


class UsersGetResponse(RootModel[List[UserRecord]]):
    root: List[UserRecord]


class VerifyPasswordChangePostRequest(BaseModel):
    guid: Optional[str] = Field(
        None,
        description='The password reset code',
        examples=['d5e53b3a-ffc1-4436-b085-04aaed5ec861'],
    )
    password: Optional[str] = Field(
        None, description='The new password', examples=['hunter3']
    )
