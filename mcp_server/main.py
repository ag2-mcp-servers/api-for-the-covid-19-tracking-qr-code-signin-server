# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:46:59+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Path
from pydantic import conint

from models import (
    ChangePasswordPostRequest,
    CreateUserResponse,
    InvalidToken,
    KeyFailure,
    LoginPostRequest,
    LoginResponse,
    RequestPasswordResetPostRequest,
    RequestPasswordResetResponse,
    Signin,
    SigninResponse,
    SigninsGetResponse,
    UserPostRequest,
    UserRecord,
    UsersGetResponse,
    VerifyPasswordChangePostRequest,
)

app = MCPProxy(
    description='This is the API for the COVID-19 Contact Tracing QRCode Signin Server',
    title='API for the COVID-19 Tracking QR Code Signin Server.',
    version='1.1',
    servers=[
        {'url': 'http://c19qrserver.local'},
        {
            'description': 'SwaggerHub API Auto Mocking',
            'url': 'https://virtserver.swaggerhub.com/aijaz/QRCodeSigninServer/1.1',
        },
    ],
)


@app.post(
    '/changePassword',
    description=""" Pass in your old password and your new password """,
    tags=['password_security', 'user_profile_management'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def post_change_password(body: ChangePasswordPostRequest):
    """
    Used for changing your password
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/login',
    description=""" Submit your email and password to get an API token """,
    tags=['user_authentication'],
)
def post_login(body: LoginPostRequest):
    """
    Log in to get an API token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/logout',
    description=""" Log out by deleting your token off the server. """,
    tags=['user_authentication'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def post_logout():
    """
    Log out
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/requestPasswordReset',
    description=""" The admin should run this on behalf of a user who forgot their password.  The API will generate a password reset code which the admin should then provide to the user. The user can use their client to reset their password. Normally the password reset code is mailed to the user, but I didn't want to do this in this case because I didn't want to  introduce the complicated dependency of having an SMTP server just for this purpose. Doing it this way makes it easy for people to adopt this  API.
 """,
    tags=['password_security', 'user_authentication'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def post_request_password_reset(body: RequestPasswordResetPostRequest):
    """
    Used for requesting a password reset code
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/signin',
    description=""" Create a new signin record """,
    tags=['user_authentication', 'signin_record_management'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def post_signin(body: Signin = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/signin/{signinId}',
    description=""" Delete a signin record      
 """,
    tags=['signin_record_management'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def delete_signin__signin_id(signin_id: int = Path(..., alias='signinId')):
    """
    Delete a signin record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/signin/{signinId}',
    description=""" Retrieve the information associated with a signin record
 """,
    tags=['signin_record_management', 'user_authentication'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def get_signin__signin_id(signin_id: int = Path(..., alias='signinId')):
    """
    Retrieve the information associated with a signin record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/signin/{signinId}',
    description=""" Update a signin record
 """,
    tags=['signin_record_management'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def put_signin__signin_id(
    signin_id: int = Path(..., alias='signinId'), body: Signin = None
):
    """
    Update a signin record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/signins',
    description=""" Returns a list of signin objects sorted by signin ID descending. """,
    tags=['user_authentication', 'signin_record_management'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def get_signins(
    less_than: Optional[int] = None, return_count: Optional[conint(ge=1, le=100)] = 100
):
    """
    Get signin info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user',
    description=""" Use this endpoint to create a team member (user) record """,
    tags=['user_profile_management'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def post_user(body: UserPostRequest):
    """
    Create a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/{userId}',
    description=""" To preserve referential integrity in the database, the user account  will not be deleted from the database. Rather, the password will be set to the empty string, effectively preventing that user from logging in. Furthermore, all active sessions for that user will be deleted, as will any password reset tokens. 
 """,
    tags=['user_profile_management'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def delete_user__user_id(user_id: int = Path(..., alias='userId')):
    """
    Delete a team member's user record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/{userId}',
    description=""" Retrieve the information associated with a user's account
 """,
    tags=['user_profile_management'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def get_user__user_id(user_id: int = Path(..., alias='userId')):
    """
    Retrieve the information associated with a team member's user record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    description=""" Retrieve the information associated with all team members' user records
 """,
    tags=['user_profile_management'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def get_users():
    """
    Retrieve the information associated with all team members' user records
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/verifyPasswordChange',
    description=""" Another endpoint will generate a password reset code for you. You should  use the client app to submit the reset code along with the new password to change your password.
 """,
    tags=['user_authentication', 'password_security'],
    security=[
        APIKeyHeader(name="token"),
    ],
)
def post_verify_password_change(body: VerifyPasswordChangePostRequest):
    """
    Used for resetting your password when you forgot it
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
